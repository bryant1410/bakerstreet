---
# file: /etc/datawire/bakerstreet-dev.yml
#
# An example Datawire Baker Street configuration file suitable for development. The token in this file are fake.

sherlock:

  hub_gateway:
    host: localhost
    port: 8080
    token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJkYXRhd2lyZS5pbyIsImlhdCI6MTQ1MzIzNTQyNSwiZXhwIjoxNDg0NzcyMDI1LCJhdWQiOiJkZXZlbG9wZXIiLCJzdWIiOiJwbG9tYmFyZGlAZGF0YXdpcmUuaW8ifQ.9ELFP05Z4-MpzhXoweDB5cyyId-1GwOYp5vtvCd27pU
    secure: false

  haproxy:
    # the path to the HAProxy executable
    # executable: /usr/sbin/haproxy
    executable:

    # directory where HAProxy should store configuration and runtime state
    run_dir: /home/plombardi/workspace/datawire/backplane/bakerstreet/data

    # the HAProxy configuration template which can be modified for further HAProxy customization
    config_template: /home/plombardi/workspace/datawire/backplane/bakerstreet/data/haproxy-dev.conf

    # the HAProxy PID file
    pid_path: /opt/datawire/run/haproxy.pid

    # the command to reload the HAProxy process
    reload_command: "-f {0} -p {1}"

  # The debounce parameter controls how sensitive you want Sherlock to be about configuration changes. Typically,
  # Sherlock will need to restart an OS process if configuration changes are made. This can become an all-consuming
  # operation if the configuration changes are frequent enough. The debounce parameter means the configuration will not
  # update until at least the specified time below has been reached if frequent changes are occurring.
  debounce: 5s

watson:

  hub_gateway:
    host: localhost
    port: 8080
    token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJkYXRhd2lyZS5pbyIsImlhdCI6MTQ1MzIzNTQyNSwiZXhwIjoxNDg0NzcyMDI1LCJhdWQiOiJkZXZlbG9wZXIiLCJzdWIiOiJwbG9tYmFyZGlAZGF0YXdpcmUuaW8ifQ.9ELFP05Z4-MpzhXoweDB5cyyId-1GwOYp5vtvCd27pU
    secure: false

  service:
    # the name of the service
    name: foobar-service

    # the url of the service
    url: http://localhost:2218

    # the path of the service
    path: /v1/foobar
  health_check:
    # the type of health check (currently only 'http' is supported)
    type: http

    # the health check method
    method: GET

    # the url of the health check (can be http or https)
    url: http://localhost:2218/health

    # the frequency of the health check
    frequency: 5s

    # HTTP statuses that should be considered healthy.
    healthy_statuses:
      - 200
      - 204

    # timeout period after which a service will be marked as unhealthy
    timeout: 5s

    # the number of consecutive failed checks before the service is marked as unhealthy.
    unhealthy_threshold: 0

    # the number of consecutive successful checks before the service is marked as healthy.
    healthy_threshold: 0
  logging:
    format: "-->  %(levelname)s: %(name)s - %(asctime)s - %(message)s"
    level: info

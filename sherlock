#!/usr/bin/env python

# Copyright 2015 The Baker Street Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Sherlock

- Subscribe to the directory
- Track routes that target HTTP
- Keep an HAProxy config file updated with tracked routes
"""

import httplib
import os
import logging
from argparse import ArgumentParser
from urlparse import urlparse
from time import time, ctime
from subprocess import Popen
import time
import json

import threading
import platform
import pprint


from proton.reactor import Reactor
from datawire import Configuration, Processor, Receiver

from _metadata_sherlock import __version__

logging.basicConfig(datefmt="%Y-%m-%d %H:%M:%S",
                    format="%(asctime)s sherlock %(name)s %(levelname)s %(message)s")
log = logging.getLogger()

confBase = """
global
    daemon
    maxconn 256

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms

frontend http-in
    bind *:8000""".split("\n")

current_millis_time = lambda: int(round(time.time() * 1000))

def send_stats(stats_server, sherlock, start_time):
    (host, port) = stats_server.split(':')

    while True:
        time.sleep(60)

        route_map = sherlock.route_map.copy()
        service_count = len(route_map)
        service_endpoints = {k: {"targets": v[0], "target_count": len(v[0])} for k, v in route_map.items()}
        stats_payload = {
            'start_time': int(start_time),
            'latencies': sherlock.latencies,
            'service_count': service_count,
            'service_endpoints': service_endpoints,
            'notification_count': sherlock.notifications_count
        }

        conn = httplib.HTTPConnection(host, int(port))
        conn.request('PUT', '/sherlocks/{0}/stats'.format(platform.node()), json.dumps(stats_payload))
        response = conn.getresponse()
        if response.status == 204 and len(sherlock.latencies) > 0:
            sherlock.clear_latencies()


class Sherlock(object):

    def __init__(self, args):
        self.receiver = Receiver(args.directory, Processor(self))
        self.route_map = {}  # address -> [ url, url, ... ], policy

        self.debounce_interval = args.debounce
        self.directory_debounce_interval = args.dir_debounce

        self.updated = True
        self.last_modification_time = 0
        self.current_debounce = self.debounce_interval
        self.previous_config = None

        self.haproxy_config_path = os.path.join(args.rundir, "haproxy.conf")
        self.haproxy_pid_path = os.path.join(args.rundir, "haproxy.pid")
        self.haproxy_command = "%s -f %s -p %s" % (args.proxy, self.haproxy_config_path, self.haproxy_pid_path)

        # Statistics
        self.notifications_count = 0
        self.latencies = []
        self.start_time = current_millis_time()
        self.address_to_routes = {}

    def clear_latencies(self):
        del self.latencies[:]

    def on_reactor_init(self, event):
        self.receiver.start(event.reactor)
        event.reactor.schedule(self.current_debounce, self)

    def on_link_remote_open(self, event):
        log.info("Detected new connection to the directory at %s", ctime())
        self.current_debounce = self.directory_debounce_interval

    def on_message(self, event):
        if event.message.subject != "routes":
            return

        msg = event.message
        address = msg.body[0]
        routes = msg.body[1]

        if address not in self.address_to_routes:
            self.address_to_routes[address] = set([])

        if routes:
            incoming = set([target
                            for (host, port, target), owner in routes
                            if target and target.upper().startswith("HTTP")])

            existing = self.address_to_routes[address]
            new_routes = [x for x in incoming if x not in existing]

            if new_routes:
                log.debug("NEW ROUTES (count: %s) ->     = %s", len(new_routes), new_routes)
                self.notifications_count += 1

            for r in new_routes:
                self.address_to_routes[address].add(r)

                # The event ID was appended to the URL (target) in Watson
                watson_sent = int(urlparse(r).path[1:])
                sherlock_received = current_millis_time()
                latency = 0
                if watson_sent >= self.start_time:
                    latency = current_millis_time() - watson_sent
                else:
                    latency = sherlock_received - self.start_time
                self.latencies.append(latency)

            log.debug("""
----[ Routes for '%s' ]----
%s
----------------------------------------------------------""", address, pprint.pformat(self.address_to_routes[address]))

            #print(address)
            #pprint.pprint(routes[0][0])

            # target = routes[0][0][-1]
            # watson_sent = int(urlparse(new_routes[0]).path[1:])
            # sherlock_received = current_millis_time()
            # latency = 0
            # if watson_sent >= self.start_time:
            #     log.debug("Newer Data")
            #     latency = current_millis_time() - watson_sent
            # else:
            #     log.debug("Older Data")
            #     latency = sherlock_received - self.start_time

            # sherlock_received = current_millis_time()
            # diff_start_now = sherlock_received - self.start_time
            # latency = (sherlock_received - self.start_time) + watson_sent

            # log.info("""
            # Sherlock Start : %s
            # Sherlock Recv  : %s
            # Watson   Sent  : %s
            # Latency        : %sms
            # """, self.start_time, sherlock_received, watson_sent, latency)

            # log.debug("Routing Event (latency: %sms, watson(%s) -> sherlock(%s))", latency, watson_sent, sherlock_received)
            # self.notifications_count += 1
            #self.latencies.append(latency)

            # if address not in self.address_to_route_count:
            #     self.address_to_route_count[address] = 0
            #
            # if len(routes) >= self.address_to_route_count[address]:
            #     log.debug("New route... adding latency info")
            #     self.address_to_route_count[address] = len(routes)
            #     self.latencies.append(latency)
            # else:
            #     log.debug("Existing or ")

        policy = msg.properties["policy"]
        self.route_map[address] = ([target[:target.rfind("/") + 1]
                                   for (host, port, target), owner in routes
                                   if target and target.upper().startswith("HTTP")], policy)

        self.updated = True
        self.last_modification_time = time.time()
        event.reactor.schedule(self.current_debounce, self)

    def on_timer_task(self, event):
        if not self.updated:
            return

        elapsed = time.time() - self.last_modification_time
        if elapsed < self.current_debounce:
            event.reactor.schedule(self.current_debounce - elapsed, self)
            return

        self.updated = False
        self.current_debounce = self.debounce_interval
        self.update_haproxy()

    def render(self):

        """Generates the HAProxy configuration file contents"""

        head, frontends, backends = [], [], []
        for address, (routes, policy) in sorted(self.route_map.items()):
            if len(routes) > 0:
                head.append("# %s -> (%s) %s" % (address, policy, "; ".join(sorted(routes))))

                # there is always going to be at least one route so grab one and parse the path out of it since that is
                # our rewrite content
                route_url = urlparse(routes[0])
                route_path = route_url.path

                internal_url = urlparse(address)
                service_name = internal_url.path[1:]
                backend = "BE" + "_" + service_name
                acl_name = "IS" + "_" + service_name
                frontends.append("\n    acl %s path_beg %s" % (acl_name, "/%s" % service_name))
                frontends.append("    use_backend %s if %s" % (backend, acl_name))
                backends.append("\nbackend %s" % backend)

                # Rewrites the incoming URL so that the service name is removed and replaced with the path component of
                # the service_url as defined in watson's configuration. Afterwards the rest of the request line is added
                # back onto the rewritten path (e.g. query parameters, fragments)
                backends.append("    reqrep ^([^\ :]*)\ /%s(.*) \\1\ %s\\2" % (service_name,
                                                                              (route_path if route_path else "/")))
                for url in sorted(routes):
                    internal_url = urlparse(url)
                    host = internal_url.hostname
                    port = internal_url.port or 80
                    name = "%s_%s" % (host, port)
                    backends.append("    server %s %s:%s maxconn 32" % (name, host, port))

        return "\n".join(head + confBase + frontends + backends)

    def update_haproxy(self):

        """Updates HAProxy configuration and then restarts the HAProxy process to read the configuration changes"""

        haproxy_config_content = self.render()
        if haproxy_config_content != self.previous_config:
            self.previous_config = haproxy_config_content
            with open(self.haproxy_config_path, "wb") as outf:
                outf.write("# Last update %s\n" % ctime())
                outf.write(haproxy_config_content)
                outf.write("\n")
            log.info("Wrote new configuration file to %s at %s", self.haproxy_config_path, ctime())
            command = self.haproxy_command
            try:
                command += " -sf %s" % open(self.haproxy_pid_path).read()
            except IOError:
                pass
            try:
                Popen(command.split(), close_fds=True)
                log.info("Launched %s", command)
            except OSError as exc:
                log.error("Failed to launch %r", command)
                log.error(" (%s)", exc)
        else:
            log.info("Duplicate output suppressed at %s", ctime())

default_config = """
[DEFAULT]
logging: WARNING

[Datawire]
directory_host:

[Sherlock]
proxy: /usr/sbin/haproxy
rundir: .
debounce: 2  ; seconds
dir_debounce: 2  ; seconds
"""

def write_sherlock_stats(stats_file, sherlock, start_time):
    import json
    import pprint

    stats = {
        "run_length": int(time.time()) - start_time,
        "latencies": sherlock.latencies,
        "notifications_received": sherlock.notifications_received
    }

    with open(stats_file, "w+") as f:
        json.dump(stats, f)

def main():
    parser = ArgumentParser()
    parser.add_argument("-c", "--config", help="read from additional config file", metavar="FILE")
    parser.add_argument('--stats', help="host:port to send statistics data")
    parser.add_argument("-V", "--version", action="version", version="%(prog)s " + __version__)
    args = parser.parse_args()

    loader = Configuration(default_config)
    loader.add_file_relative("sherlock.conf")
    if args.config:
        loader.add_file_absolute(args.config)

    try:
        config = loader.parse()
        args.directory_host = config.get("Datawire", "directory_host")
        args.proxy = config.get("Sherlock", "proxy")
        args.rundir = config.get("Sherlock", "rundir")
        args.debounce = config.getint("Sherlock", "debounce")
        args.dir_debounce = config.getint("Sherlock", "dir_debounce")
        args.logging = config.get("Sherlock", "logging")
    except Exception:
        log.exception("Failed to load configuration")
        loader.exit_with_config_error("Failed to load configuration")

    log.setLevel(getattr(logging, args.logging.upper()))
    if not loader.parsed_filenames:
        log.warning("No configuration files found. Falling back to defaults.")
    if not args.directory_host:
        log.warning("No directory_host configured. Falling back to localhost.")
        args.directory_host = "localhost"

    args.directory = "//%s/directory" % args.directory_host

    sherlock = Sherlock(args)
    start_time = time.time()

    stats_thread = threading.Thread(target=send_stats, args=(args.stats, sherlock, int(start_time),))
    stats_thread.daemon = True
    stats_thread.start()

    Reactor(sherlock).run()

if __name__ == "__main__":
    main()
